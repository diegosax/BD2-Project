/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package gui;

import exception.AcessoRepositorioException;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import negocio.*;

/**
 *
 * @author miguel
 */
public class MeetingUI extends javax.swing.JFrame {

    /**
     * Creates new form MeetingUI
     */
    public MeetingUI() {
        initComponents();
        initComponents2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btNewClient = new javax.swing.JButton();
        btNewDoctor = new javax.swing.JButton();
        btNewService = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelData1 = new gui.PanelData();
        cbDoctor = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        listServices = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taNotes = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        cbClients = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        listDates = new javax.swing.JList();
        btSair = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btAtualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        btNewClient.setText("Novo Cliente");
        btNewClient.setFocusable(false);
        btNewClient.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btNewClient.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btNewClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewClientActionPerformed(evt);
            }
        });
        jToolBar1.add(btNewClient);

        btNewDoctor.setText("Novo Médico");
        btNewDoctor.setFocusable(false);
        btNewDoctor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btNewDoctor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btNewDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewDoctorActionPerformed(evt);
            }
        });
        jToolBar1.add(btNewDoctor);

        btNewService.setText("Novo Serviço");
        btNewService.setFocusable(false);
        btNewService.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btNewService.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btNewService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewServiceActionPerformed(evt);
            }
        });
        jToolBar1.add(btNewService);

        jLabel1.setText("Médico:");

        jLabel2.setText("Data:");

        cbDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDoctorActionPerformed(evt);
            }
        });

        listServices.setModel(new DefaultListModel());
        listServices.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listServices);

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 10));
        jLabel3.setText("Especialidade:");

        jLabel4.setText("Observação:");

        taNotes.setColumns(20);
        taNotes.setRows(5);
        jScrollPane2.setViewportView(taNotes);

        jLabel5.setText("Cliente:");

        listDates.setModel(new DefaultListModel());
        listDates.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listDates);

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btAtualizar.setText("Atualizar");
        btAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbClients, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSair))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(panelData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane3))
                            .addComponent(btAtualizar))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(cbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(panelData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbClients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAtualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btSair)
                            .addComponent(btCancelar)
                            .addComponent(btSalvar))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btNewClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewClientActionPerformed
        this.novoCliente();
    }//GEN-LAST:event_btNewClientActionPerformed

    private void btNewDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewDoctorActionPerformed
        this.newDoctor();
    }//GEN-LAST:event_btNewDoctorActionPerformed

    private void cbDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDoctorActionPerformed
        this.preencherServicesList();
    }//GEN-LAST:event_cbDoctorActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        this.sair();
    }//GEN-LAST:event_btSairActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        this.cancelar();
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        this.salvar();
    }//GEN-LAST:event_btSalvarActionPerformed

    private void btAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizarActionPerformed
        this.atualizar();
    }//GEN-LAST:event_btAtualizarActionPerformed

    private void btNewServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewServiceActionPerformed
        this.newService();
    }//GEN-LAST:event_btNewServiceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MeetingUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MeetingUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MeetingUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MeetingUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MeetingUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAtualizar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btNewClient;
    private javax.swing.JButton btNewDoctor;
    private javax.swing.JButton btNewService;
    private javax.swing.JButton btSair;
    private javax.swing.JButton btSalvar;
    private javax.swing.JComboBox cbClients;
    private javax.swing.JComboBox cbDoctor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList listDates;
    private javax.swing.JList listServices;
    private gui.PanelData panelData1;
    private javax.swing.JTextArea taNotes;
    // End of variables declaration//GEN-END:variables

    List<Doctor> doctors;
    List<Client> clients;
    List<Service> services;
                    
    private void initComponents2() {
        panelData1.getDatePicker().addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                preencherHorariosDisponiveis();
            }
        });
        this.preencherComboBoxDoctor();
        this.preencherComboBoxClients();
        this.preencherHorariosDisponiveis();
    }
    
    private void novoCliente() {
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                ClientsUI client = new ClientsUI();
                client.setVisible(true);
            }
        });
    }

    private void newDoctor() {
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                DoctorsUI doctor = new DoctorsUI();
                doctor.setVisible(true);
            }
        });
    }

    private void preencherComboBoxDoctor() {
        try {
            List<User> users = Fachada.getFachada().getAllUsers();
            doctors = new ArrayList<Doctor>();
            
            cbDoctor.removeAllItems();
            
            for (User u : users){
                if (u instanceof Doctor){
                    doctors.add((Doctor)u);
                    
                    cbDoctor.addItem(u.getName());
                }
            }
            
        } catch (AcessoRepositorioException ex) {
            ex.printStackTrace();
        }
    }

    private void preencherComboBoxClients() {
        try {
            List<User> users = Fachada.getFachada().getAllUsers();
            clients = new ArrayList<Client>();
            
            cbClients.removeAllItems();
            
            for (User u : users){
                if (u instanceof Client){
                    clients.add((Client)u);
                    
                    cbClients.addItem(u.getName());
                }
            }
            
        } catch (AcessoRepositorioException ex) {
            ex.printStackTrace();
        }
    }
    
    private void preencherHorariosDisponiveis(){
        // TODO
    }

    private void preencherServicesList() {
        try {
            if (cbDoctor.getSelectedIndex() != -1){
                Doctor d = doctors.get(cbDoctor.getSelectedIndex());
                services = Fachada.getFachada().get(d);
                DefaultListModel model = (DefaultListModel) listServices.getModel();

                model.removeAllElements();

                for (Service s : services){
                    model.addElement(s.getName());
                }
            }
        } catch (AcessoRepositorioException ex) {
            ex.printStackTrace();
        }
    }

    private void sair() {
        this.dispose();
    }

    private void cancelar() {
        cbDoctor.setSelectedIndex(0);
        cbClients.setSelectedIndex(0);
        taNotes.setText("");
        ((DefaultListModel)listDates.getModel()).removeAllElements();
        ((DefaultListModel)listDates.getModel()).removeAllElements();
    }

    private void salvar() {
        int selectedDoctor = cbDoctor.getSelectedIndex();
        int selectedClient = cbClients.getSelectedIndex();
        int selectedService[] = listServices.getSelectedIndices();
        int selectedDate[] = listDates.getSelectedIndices();
        
        if (selectedDoctor == -1 || selectedClient == -1 ||
                selectedService.length != 0 || selectedDate.length != 1){
            JOptionPane.showMessageDialog(this, "Algum campo inválido",
                    "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                Meeting m = new Meeting();
                
                m.setClient(clients.get(selectedClient));
                m.setDoctor(doctors.get(selectedDoctor));
                m.setNotes(taNotes.getText().trim());
                m.setScheduledDate(panelData1.getCalendar());
                m.setService(services.get(selectedService[0]));
                // TODO a hora selecionada?
                
                Fachada.getFachada().insert(m);
                
                JOptionPane.showMessageDialog(this, "Inserido com sucesso!",
                    "Concluído!", JOptionPane.INFORMATION_MESSAGE);
            } catch (AcessoRepositorioException ex) {
                ex.printStackTrace();
            } 
        }
    }

    private void atualizar() {
        this.preencherComboBoxDoctor();
        this.preencherComboBoxClients();
        this.preencherHorariosDisponiveis();
    }

    private void newService() {
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                ServiceUI service = new ServiceUI();
                service.setVisible(true);
            }
        });
    }
        

}
